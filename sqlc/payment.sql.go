// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: payment.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (appointment_id, amount, payment_method, created_at, updated_at)
VALUES ($1, $2, $3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING id, appointment_id, amount, payment_method, created_at, updated_at
`

type CreatePaymentParams struct {
	AppointmentID int32
	Amount        pgtype.Numeric
	PaymentMethod string
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment, arg.AppointmentID, arg.Amount, arg.PaymentMethod)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.Amount,
		&i.PaymentMethod,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM payments
WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePayment, id)
	return err
}

const getPaymentByID = `-- name: GetPaymentByID :one
SELECT id, appointment_id, amount, payment_method, created_at, updated_at
FROM payments
WHERE id = $1
`

func (q *Queries) GetPaymentByID(ctx context.Context, id int32) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByID, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.Amount,
		&i.PaymentMethod,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPayments = `-- name: ListPayments :many
SELECT id, appointment_id, amount, payment_method, created_at, updated_at
FROM payments
ORDER BY id
`

func (q *Queries) ListPayments(ctx context.Context) ([]Payment, error) {
	rows, err := q.db.Query(ctx, listPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.AppointmentID,
			&i.Amount,
			&i.PaymentMethod,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePayment = `-- name: UpdatePayment :exec
UPDATE payments
SET appointment_id = $2, amount = $3, payment_method = $4, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdatePaymentParams struct {
	ID            int32
	AppointmentID int32
	Amount        pgtype.Numeric
	PaymentMethod string
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) error {
	_, err := q.db.Exec(ctx, updatePayment,
		arg.ID,
		arg.AppointmentID,
		arg.Amount,
		arg.PaymentMethod,
	)
	return err
}
