// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: appointment.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAppointment = `-- name: CreateAppointment :one
INSERT INTO appointments (pet_id, vet_id, service, date, created_at, updated_at)
VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING id, pet_id, vet_id, service, date, created_at, updated_at
`

type CreateAppointmentParams struct {
	PetID   int32
	VetID   int32
	Service string
	Date    pgtype.Timestamp
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, createAppointment,
		arg.PetID,
		arg.VetID,
		arg.Service,
		arg.Date,
	)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.PetID,
		&i.VetID,
		&i.Service,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAppointment = `-- name: DeleteAppointment :exec
DELETE FROM appointments
WHERE id = $1
`

func (q *Queries) DeleteAppointment(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAppointment, id)
	return err
}

const getAppointmentByID = `-- name: GetAppointmentByID :one
SELECT id, pet_id, vet_id, service, date, created_at, updated_at
FROM appointments
WHERE id = $1
`

func (q *Queries) GetAppointmentByID(ctx context.Context, id int32) (Appointment, error) {
	row := q.db.QueryRow(ctx, getAppointmentByID, id)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.PetID,
		&i.VetID,
		&i.Service,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAppointments = `-- name: ListAppointments :many
SELECT id, pet_id, vet_id, service, date, created_at, updated_at
FROM appointments
ORDER BY id
`

func (q *Queries) ListAppointments(ctx context.Context) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, listAppointments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.PetID,
			&i.VetID,
			&i.Service,
			&i.Date,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAppointmentsPetID = `-- name: ListAppointmentsPetID :many
SELECT id, pet_id, vet_id, service, date, created_at, updated_at
FROM appointments
ORDER BY pet_id
`

func (q *Queries) ListAppointmentsPetID(ctx context.Context) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, listAppointmentsPetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.PetID,
			&i.VetID,
			&i.Service,
			&i.Date,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAppointment = `-- name: UpdateAppointment :exec
UPDATE appointments
SET pet_id = $2, vet_id = $3, service = $4, date = $5, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateAppointmentParams struct {
	ID      int32
	PetID   int32
	VetID   int32
	Service string
	Date    pgtype.Timestamp
}

func (q *Queries) UpdateAppointment(ctx context.Context, arg UpdateAppointmentParams) error {
	_, err := q.db.Exec(ctx, updateAppointment,
		arg.ID,
		arg.PetID,
		arg.VetID,
		arg.Service,
		arg.Date,
	)
	return err
}
